{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","preState","setPreState","curState","setCurState","input","setInput","operator","setOperator","total","setTotal","inputNum","e","includes","target","innerText","pre","useEffect","operatorType","equals","cal","String","parseFloat","className","value","displayType","thousandSeparator","variant","onClick","type","charAt","substring","style","gridColumn","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b7a2104.chunk.js","sourcesContent":["\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport { button } from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NumberFormat from 'react-number-format';\n\nfunction App() {\n  const [preState, setPreState] = useState(\"\");\n  const [curState, setCurState] = useState(\"\");\n  const [input, setInput] = useState(\"0\");\n  const [operator, setOperator] = useState(null);\n  const [total, setTotal] = useState(false);\n\n  const inputNum = (e) => {\n\n    if (curState.includes(\".\") && e.target.innerText === \".\") return\n\n    if (total) {\n      setPreState(\"\")\n    }\n\n    curState ? setCurState((pre) => pre + e.target.innerText)\n      : setCurState(e.target.innerText);\n\n    setTotal(false);\n\n  };\n\n  useEffect(() => {\n    setInput(curState)\n\n  }, [curState]\n  )\n  useEffect(() => {\n    setInput(\"0\")\n\n  }, []\n  )\n\n  const operatorType = (e) => {\n    setTotal(false);\n    setOperator(e.target.innerText);\n    if(curState ===\"\") return\n    if( preState !==\"\" ) {\n      equals()\n    }\n\n    else {\n    setPreState(curState)\n    setCurState(\"\")}\n  };\n\n  const equals = (e) => {\n\n\n      if (e?.target.innerText ===\"\")\n      setTotal(true)\n\n      let cal;\n      switch(operator){\n        case \"/\":\n          cal = String(parseFloat(preState)/parseFloat(curState))\n          \n        break;\n        case \"+\":\n          cal = String(parseFloat(preState)+parseFloat(curState))\n        break;\n        case \"-\":\n          cal = String(parseFloat(preState)-parseFloat(curState))\n        break;\n        case \"x\":\n          cal = String(parseFloat(preState)*parseFloat(curState))\n        break;\n\n        default:\n          return\n      \n      }\n\n      setInput(\"\")\n      setPreState(cal)\n      setCurState(\"\")\n      \n  };\n\n\n  const minusPlus = () => {\n\n      if (curState.charAt(0) === \"-\")\n        setCurState(curState.substring(1))\n      else \n      setCurState(\"-\" + curState)\n\n  };\n\n  const percent = () => {\n\n    preState ? setCurState(String(parseFloat(curState)/100 *preState)) :\n               setCurState(String(parseFloat(curState)/100));\n\n\n  };\n\n  const reset = () => {\n    setCurState(\"\")\n    setPreState(\"\")\n    setInput(\"0\")\n\n  };\n\n\n\n\n  return (\n<>\n\n    \n    <div className=\"container\">\n    \n      <div className=\"wrapper\" >\n\n        <div className=\"screen\" > {input!== \"\" || input ===\"0\" ? (\n         <NumberFormat value={input} displayType={\"text\"}\n         thousandSeparator={true} \n         \n          />\n        \n          ) : (<NumberFormat value={preState} displayType={\"text\"}\n          thousandSeparator={true} />) }  </div>\n\n\n        <button variant=\"default\" className=\"btn btn-secondary \" onClick={reset} type=\"button\">AC</button>\n        <button variant=\"default\" className=\"btn btn-secondary \" onClick={percent} type=\"button\">%</button>\n        <button variant=\"default\" className=\"btn btn-secondary \" onClick={minusPlus} type=\"button\">+/-</button>\n        <button variant=\"default\" className=\"btn btn-warning \" onClick={operatorType} type=\"button\">/</button>\n\n\n        <button variant=\"default\" className=\"btn btn-dark\" onClick={inputNum} type=\"button\">7</button>\n        <button variant=\"default\" className=\"btn btn-dark\" onClick={inputNum} type=\"button\">8</button>\n        <button variant=\"default\" className=\"btn btn-dark\" onClick={inputNum} type=\"button\">9</button>\n        <button variant=\"default\" className=\"btn btn-warning\" onClick={operatorType} type=\"button\">x</button>\n\n\n        <button className=\"btn btn-dark\" onClick={inputNum} type=\"button\">4</button>\n        <button className=\"btn btn-dark\" onClick={inputNum} type=\"button\">5</button>\n        <button className=\"btn btn-dark\" onClick={inputNum} type=\"button\">6</button>\n        <button className=\"btn btn-warning\" onClick={operatorType} type=\"button\">+</button>\n\n\n        <button className=\"btn btn-dark\" onClick={inputNum} type=\"button\">1</button>\n        <button className=\"btn btn-dark\" onClick={inputNum} type=\"button\">2</button>\n        <button className=\"btn btn-dark\" onClick={inputNum} type=\"button\">3</button>\n        <button className=\"btn btn-warning\" onClick={operatorType} type=\"button\">-</button>\n\n        <button className=\"btn btn-dark\" onClick={inputNum} style={{ gridColumn: '1/ span 2', width: '200px !important' }} type=\"button\">0</button>\n        <button className=\"btn btn-dark\" onClick={inputNum} type=\"button\">.</button>\n        <button className=\"btn btn-dark\" onClick={equals} type=\"button\">=</button>\n\n\n\n\n      </div>\n\n    </div>\n\n<br/>\n    <h3>Danish Butt</h3>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}